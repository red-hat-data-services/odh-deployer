apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    app: prometheus
  name: prometheus
  namespace: redhat-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: prometheus
  template:
    metadata:
      labels:
        deployment: prometheus
    spec:
      containers:
      - image: quay.io/prometheus/prometheus:v2.24.1
        args:
          - --storage.tsdb.retention=6h
          - --storage.tsdb.min-block-duration=2h
          - --storage.tsdb.max-block-duration=2h
          - --storage.tsdb.path=/prometheus/data
          - --config.file=/etc/prometheus/prometheus.yml
          - --web.listen-address=localhost:9090
          - --web.enable-lifecycle
          - --web.enable-admin-api
        imagePullPolicy: Always
        name: prometheus
        ports:
        - containerPort: 9090
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /prometheus
          name: prometheus-data
        - mountPath: /etc/prometheus
          name: prometheus-config
        - mountPath: /var/run/secrets/kubernetes.io/scraper
          name: prometheus-scraper-secret
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data
      - name: prometheus-config
        configMap:
          defaultMode: 420
          name: prometheus
      - name: prometheus-scraper-secret
        secret:
          secretName: prometheus-scraper
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
  namespace: redhat-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval:     10s
      evaluation_interval: 10s
    scrape_configs:
      - job_name: 'JupyterHub Metrics'
        honor_labels: true
        metrics_path: /hub/metrics
        scheme: http
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - opendatahub
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            regex: ^(jupyterhub)$
            target_label: kubernetes_name
            action: keep
          - source_labels: [__address__]
            regex: (.+):(\d+)
            target_label: __address__
            replacement: ${1}:8080
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: redhat-monitoring
spec:
  ports:
  - name: 9090-tcp
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    deployment: prometheus
  sessionAffinity: None
  type: ClusterIP
---
# Create a service account for accessing prometheus data
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-reader
  namespace: redhat-monitoring
---
# Create a service account for prometheus to use to scrape other infrastructure components
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-scraper
  namespace: redhat-monitoring
---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-scraper
  namespace: redhat-monitoring
  annotations:
    kubernetes.io/service-account.name: prometheus-scraper
type: kubernetes.io/service-account-token
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: redhat-monitoring
spec:
  port:
    targetPort: 9090-tcp
  to:
    kind: Service
    name: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus_role_binding
subjects:
- kind: ServiceAccount
  name: prometheus-scraper
  namespace: openshift-monitoring
roleRef:
  kind: ClusterRole
  name: cluster-reader
  apiGroup: rbac.authorization.k8s.io
