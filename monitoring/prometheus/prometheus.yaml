apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: redhat-ods-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: prometheus
  template:
    metadata:
      labels:
        deployment: prometheus
      annotations:
        alertmanager: <alertmanager_config_hash>
        prometheus: <prometheus_config_hash>
    spec:
      serviceAccountName: prometheus
      initContainers:
        - name: wait-for-deployment
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 512Mi
          image: 'registry.access.redhat.com/ubi8/ubi-minimal:8.4-208'
          command:
            - /bin/sh
            - '-c'
            - for i in `seq 1 230`; do sleep 10; echo "Waiting for traefik-proxy service to become available..."; if curl -s http://traefik-proxy.redhat-ods-applications.svc:8080; then exit 0; fi; done; exit 1
      containers:
      - name: oauth-proxy
        args:
        - -provider=openshift
        - -https-address=:9091
        - -http-address=
        - -email-domain=*
        - -upstream=http://localhost:9090
        - -openshift-service-account=prometheus
        - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "redhat-ods-monitoring",
          "namespace": "redhat-ods-monitoring"}'
        - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
          "name": "redhat-ods-monitoring", "namespace": "redhat-ods-monitoring"}}'
        - -tls-cert=/etc/tls/private/tls.crt
        - -tls-key=/etc/tls/private/tls.key
        - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
        - -cookie-secret-file=/etc/proxy/secrets/session_secret
        - -openshift-ca=/etc/pki/tls/cert.pem
        - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - -client-id=system:serviceaccount:redhat-ods-monitoring:prometheus
        - -skip-auth-regex=^/metrics
        image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.8
        ports:
        - containerPort: 9091
          name: https
        livenessProbe:
          httpGet:
            path: /oauth/healthz
            port: 9091
            scheme: HTTPS
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /oauth/healthz
            port: 9091
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - mountPath: /etc/tls/private
          name: prometheus-tls
          readOnly: false
        - mountPath: /etc/proxy/secrets
          name: prometheus-proxy
          readOnly: false

      - name: prometheus
        image: registry.redhat.io/openshift4/ose-prometheus
        args:
          - --storage.tsdb.retention.time=6h
          - --storage.tsdb.min-block-duration=2h
          - --storage.tsdb.max-block-duration=2h
          - --storage.tsdb.path=/prometheus/data
          - --config.file=/etc/prometheus/prometheus.yml
          - --web.listen-address=0.0.0.0:9090
          - --web.enable-lifecycle
          - --web.enable-admin-api
        imagePullPolicy: Always
        ports:
        - containerPort: 9090
          name: http
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 400m
            memory: 4Gi
          requests:
            cpu: 200m
            memory: 2Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /prometheus
          name: prometheus-data
        - mountPath: /etc/prometheus
          name: prometheus-config
        - mountPath: /var/run/secrets/kubernetes.io/scraper
          name: prometheus-secret
        - mountPath: /etc/prometheus/ca
          name: prometheus-service-ca

      - name: alertmanager-proxy
        args:
        - -provider=openshift
        - -https-address=:10443
        - -http-address=
        - -email-domain=*
        - -upstream=http://localhost:9093
        - -openshift-service-account=prometheus
        - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "redhat-ods-monitoring",
          "namespace": "redhat-ods-monitoring"}'
        - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get",
          "name": "redhat-ods-monitoring", "namespace": "redhat-ods-monitoring"}}'
        - -tls-cert=/etc/tls/private/tls.crt
        - -tls-key=/etc/tls/private/tls.key
        - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
        - -cookie-secret-file=/etc/proxy/secrets/session_secret
        - -openshift-ca=/etc/pki/tls/cert.pem
        - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - -client-id=system:serviceaccount:redhat-ods-monitoring:prometheus
        - -skip-auth-regex=^/metrics
        image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.8
        imagePullPolicy: Always
        ports:
        - containerPort: 10443
          name: web
        livenessProbe:
          httpGet:
            path: /oauth/healthz
            port: 10443
            scheme: HTTPS
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /oauth/healthz
            port: 10443
            scheme: HTTPS
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - mountPath: /etc/tls/private
          name: alertmanager-tls
          readOnly: false
        - mountPath: /etc/proxy/secrets
          name: alertmanager-proxy
          readOnly: false

      - name: alertmanager
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 50m
            memory: 128Mi
        args:
          - --log.level=info
          - --storage.path=/alertmanager
          - --config.file=/etc/alertmanager/alertmanager.yml
          - --web.external-url=https://<set_alertmanager_host>
        image: registry.redhat.io/openshift4/ose-prometheus-alertmanager
        imagePullPolicy: Always
        ports:
          - containerPort: 9093
            name: web
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
          - mountPath: /etc/alertmanager
            name: alertmanager-config
          - mountPath: /alertmanager
            name: alertmanager-data

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      progressDeadlineSeconds: 2400
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 90
      volumes:
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data
      - name: alertmanager-data
        persistentVolumeClaim:
          claimName: "alertmanager-data"
      - name: alertmanager-config
        configMap:
          defaultMode: 420
          name: alertmanager
      - name: prometheus-config
        configMap:
          defaultMode: 420
          name: prometheus
      - name: prometheus-secret
        secret:
          secretName: prometheus-secret
      - name: prometheus-tls
        secret:
          defaultMode: 420
          secretName: prometheus-tls
      - name: alertmanager-tls
        secret:
          defaultMode: 420
          secretName: alertmanager-tls
      - name: prometheus-proxy
        secret:
          defaultMode: 420
          secretName: prometheus-proxy
      - name: alertmanager-proxy
        secret:
          defaultMode: 420
          secretName: alertmanager-proxy
      - name: prometheus-service-ca
        configMap:
          name: prometheus-service-ca
          defaultMode: 420
  strategy:
    type: Recreate

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: prometheus-tls
    prometheus.io/scheme: https
    prometheus.io/scrape: 'true'
  labels:
    app: prometheus
  name: prometheus
  namespace: redhat-ods-monitoring
spec:
  ports:
  - name: https
    port: 9091
    targetPort: https
  selector:
    deployment: prometheus
  sessionAffinity: None
  type: ClusterIP

---
# Create a service account for accessing prometheus data
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-reader
  namespace: redhat-ods-monitoring
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    kubernetes.io/tls-acme: 'true'
  labels:
    app: prometheus
  name: prometheus
  namespace: redhat-ods-monitoring
spec:
  port:
    targetPort: https
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: reencrypt
  to:
    kind: Service
    name: prometheus
  wildcardPolicy: None
---
apiVersion: authorization.openshift.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-scraper
roleRef:
  name: prometheus-scraper
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: redhat-ods-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-scraper
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - route.openshift.io
  resources:
  - routers/metrics
  - routers/federate
  verbs:
  - get
- apiGroups:
  - image.openshift.io
  resources:
  - registry/metrics
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - endpoints
  - pods
  - services
  - namespaces
  verbs:
  - list
  - get
  - watch
